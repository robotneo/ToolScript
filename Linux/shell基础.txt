shell是什么:
	shell是一个命令解释器，它为用户提供一个向Linux内核发送请求
	以便运行程序的界面系统级程序，用户可以用shell来启动，挂起，停止
	甚至是编写一些程序。
	shell还是一个功能相当强大的编程语言，易编写，易调试，灵活性较强.
	shell是解释执行的脚本语言，在shell中可以直接调用Linux系统命令。
	
	echo $SHELL	#查看当前用户shell的语法类型
	vim /etc/shells	# 查看当前系统支持的shell类型
	
	退出:exit/quit
语法:
	echo [选项] [输出内容]
	选项:
		-e	支持反斜线控制的字符转换
		
	控制字符:
		\a	输出警告音
		\b	退格键,向左删除键
		\n	换行符
		\r	回车键
		\t	制表符,也就是Tab键
		\v	垂直制表符
		\0nnn	按照八进制ASCII码表输出字符。其中0为数字零，nnn是三位八进制数。
		\xhh	按照十六进制ASCII码表输出字符。其中hh是两位十六进制数。
	输出颜色:
		#30m=黑色，31m=红色，32m=绿色，33m=黄色
		#34m=蓝色，35m=洋红，36m=青色，37m=白色
		echo -e "\e[1;31m 输出字符 \e[0m"
	脚本执行:
		赋予执行权限,直接运行
		chmod 755 hello.sh
		./hello.sh
		通过Bash调用执行脚本
		bash hello.sh
		
查看设定别名:
	alias	#查看系统中所有的命令别名
	alias 别名 = ‘原命令’	#设定命令别名
	vim ~/.bashrc	# 写入环境变量配置文件  source 文件名(直接生效，改变文件)
	unalias 别名	# 删除别名
	
	命令生效顺序:
		第一位顺位执行用绝对路径或相对路径执行的命令
		第二位顺位执行别名
		第三位顺位执行Bash的内部命令
		第四位顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令
		
	常用快捷键：
		Ctrl+c	# 强制终止当前命令
		Ctrl+l	# 清屏
		Ctrl+a	# 光标移动到命令行首
		Ctrl+e	# 光标移动到命令行尾
		Ctrl+u	# 从光标所在的位置删除到行首
		Ctrl+z	# 把命令放入后台
		Ctrl+r	# 在历史命令中搜索

历史命令:
	history [选项] [历史命令保存文件]
	选项:
		-c	清空历史命令
		-w	把缓存中的历史命令写入历史命令保存文件~/.bash_history
		
		历史命令默认保存一千条:
		/etc/profile中可以修改
		历史命令的调用:
			使用上下箭头调用以前的历史命令
			使用“!n”重复执行第n条历史命令
			使用“!!”重复执行上一条命令
			使用“!字符”重复执行最后一条以该字符开头的命令
输出重定向:
	标准输入输出：
		键盘	/dev/stdin	0	标准输入
		显示器	/dev/stdout	1	标准输出
		显示器	/dev/stderr	2	标准错误输出
		
		标准输出重定向:
			命令 > 文件  (覆盖)
			命令 >> 文件 (追加)
			
			错误命令 2>文件  (覆盖)
			错误命令 2>>文件 (追加)
			
		正确输出和错误输出同时保存:
			命令 > 文件 2>&1  (错误输出和正确输出保存在一个文件下) 覆盖
			命令 >> 文件 2>&1 (错误输出和正确输出保存在一个文件下) 追加
			命令 &>文件		  (错误输出和正确输出保存在一个文件下) 覆盖
			命令 &>>文件	  (错误输出和正确输出保存在一个文件下) 追加
			命令>>文件1 2>>文件2 (正确输出到文件1，错误输出到文件2)
			
	输入重定向:
		wc [选项] [文件名]
		选项:
			-c	统计字节数
			-w	统计单词数
			-l	统计行数
		"<" "<<"

管道符:
	多命令顺序执行:
		;	格式: 命令1;命令2	多个命令顺序执行，没有逻辑关系
		&&	格式: 命令1&&命令2	命令1正确执行，命令2才会执行
		||	格式: 命令1||命令2	只会执行正确的一个
		
		|	格式: 命令1|命令2	# 命令1的正确输出作为命令2的操作对象。
		
通配符:
	?	匹配一个任意字符
	*	匹配0个或者多个任意字符，也就是可以匹配任何内容
	[]	匹配括号中的任意一个字符。[abc]代表一定匹配一个字符
	[-]	匹配中括号中任意一个字符，-代表一个范围。例如:[a-z]代表匹配一个小写字母
	[^]	逻辑非，表示匹配不是中括号内的一个字符。[^0-9]代表匹配一个不是数字的字符
	
	''	单引号。在单引号中所有的特殊符号，如:"$",和"`"(反引号)都没有特殊含义
	""	双引号。在双引号中特殊符号都没有特殊含义，但是"$"、"`"和"\"是例外，
		拥有"调用变量的值"、"引用命令"、"转义符"的特殊含义。
	``	反引号。反引号括起来的内容是系统命令，在Bash中会先执行它。和$()作用一样，
		不过推荐使用$()，因为反引号容易看错。
	$()	和反引号作用一样，用来引用系统变量。
	#	在shell脚本中，#代表注释
	$	用于调用变量的值，如需要调用name变量的值时，需要$name的方式得到变量的值。
	\	转义符。跟在\之后的特殊字符将失去特殊含义，变为普通字符。
		
			